// ==UserScript==
// @name         DVSA Driving Test Booking Automation (Debug 2.9-simple)
// @namespace    http://tampermonkey.net/
// @version      2.9-simple
// @description  Debug version with simplified looping, stop functionality, and enhanced logging
// @include      https://driver-services.dvsa.gov.uk/*
// @grant        none
// ==/UserScript==



(function () {
    'use strict';

    console.log("Script Loaded and Running");

    const minDelay = 5000;
    const maxDelay = 10000;
    const nextWeekDelay = 4000;
    const weeksToSearch = 4; // Number of weeks to search forward AND backward (configurable)
    let currentWeekIndex = 0; // Tracks the current week in the forward direction
    let backwardWeekIndex = 0; // Tracks the current week in the backward direction
    let searchDirection = "forward"; // "forward" or "backward"
    let foundSeat = false; // Flag to stop the loop when a seat is found
    let isPopupVisible = false; // Track if popup is visible
    let isScriptRunning = true; // Flag to control script execution

    // Function to stop the script (global for console access)
    window.stopScript = function () {
        isScriptRunning = false;
        console.log("Script stopped manually. To restart, reload the page or call startSearch() manually.");
        showToast("Script stopped manually.");
    };

    function randomIntBetween(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function randomDelay(callback) {
        const delay = 8000; // Fixed 8-second delay for consistency
        console.log(`Delaying for ${delay}ms before running callback`);
        setTimeout(() => {
            console.log("Callback executed");
            callback();
        }, delay);
    }

    function showToast(message) {
        const toast = document.createElement('div');
        toast.className = 'toast';
        toast.textContent = message;
        document.body.appendChild(toast);

        setTimeout(() => toast.classList.add('show'), 10);
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => document.body.removeChild(toast), 300);
        }, 3000);
    }

    function getWeekRange() {
        const today = new Date();
        const startDate = today.toLocaleDateString('en-US', { day: 'numeric', month: 'short', year: 'numeric' });
        return { startDate: startDate }; // e.g., "18 Mar 2025"
    }

    function step6() {
        if (!isScriptRunning) {
            console.log("Script is stopped, skipping step6.");
            return;
        }

        if (isPopupVisible) {
            console.log("Script paused due to popup. Please dismiss the pop-up manually.");
            return;
        }

        console.log(`Running Step 6 - Week ${searchDirection === "forward" ? currentWeekIndex + 1 : backwardWeekIndex + 1}/${weeksToSearch}, Direction: ${searchDirection}`);

        const weekRange = getWeekRange();
        if (!weekRange) {
            console.log("Could not determine the week range");
            return;
        }

        const [startDay, startMonth, startYear] = weekRange.startDate.split(' ');
        const month = startMonth;
        const year = startYear;

        const dateCells = document.querySelectorAll('.day.none, .day.nonenonotif, .slotsavailable');
        console.log("Found date cells:", dateCells.length);
        let availableDates = [];

        dateCells.forEach(cell => {
            if (cell.classList.contains('slotsavailable')) {
                const dateLink = cell.querySelector('a');
                if (dateLink) {
                    const dateText = dateLink.textContent.trim();
                    if (dateText && !isNaN(parseInt(dateText))) {
                        const parsedDate = new Date(`${dateText} ${month} ${year}`);
                        if (!isNaN(parsedDate.getTime())) {
                            availableDates.push({
                                day: parsedDate.toLocaleString('en-US', { weekday: 'long' }),
                                date: dateText
                            });
                        }
                    }
                }
            }
        });

        if (availableDates.length > 0) {
            foundSeat = true;
            const formattedDates = availableDates.map(({ day, date }) => `${day}, ${date} ${month} ${year}`);
            console.log("Available dates this week:", formattedDates);
            showAvailableDatesTable(formattedDates);
            showToast("Seat available!");
            return; // Stop when a seat is found
        } else {
            console.log("No available dates found in this week");
            showToast("No dates available");
        }

        if (!foundSeat) {
            if (searchDirection === "forward" && currentWeekIndex < weeksToSearch - 1) {
                console.log("Moving to next week forward...");
                currentWeekIndex++;
                step7();
            } else if (searchDirection === "forward" && currentWeekIndex === weeksToSearch - 1) {
                console.log("Reached end of forward search, switching to backward...");
                searchDirection = "backward";
                backwardWeekIndex = 0; // Start backward from the current point
                goToPreviousWeek();
            } else if (searchDirection === "backward" && backwardWeekIndex < weeksToSearch - 1) {
                console.log("Moving to previous week backward...");
                backwardWeekIndex++;
                goToPreviousWeek();
            } else if (searchDirection === "backward" && backwardWeekIndex === weeksToSearch - 1) {
                console.log("Reached end of backward search, looping back to forward...");
                searchDirection = "forward";
                currentWeekIndex = 0; // Reset to start forward again
                step7();
            }
        }
    }

  step6()

    function step7() {
        if (!isScriptRunning) {
            console.log("Script is stopped, skipping step7.");
            return;
        }

        if (isPopupVisible) {
            console.log("Script paused due to popup. Please dismiss the pop-up manually.");
            return;
        }

        console.log(`Running Step 7 - Direction: ${searchDirection}`);
        const nextWeekLink = document.querySelector('#searchForWeeklySlotsNextWeek');

        if (nextWeekLink && !foundSeat) {
            console.log("Next week button found, attempting click...");
            setTimeout(() => {
                if (checkForPopup()) return; // Check popup before clicking
                nextWeekLink.click();
                console.log("Clicked on next week link");
                showToast("Checking availability for next week...");
                setTimeout(step6, 8000);
            }, nextWeekDelay);
        } else {
            console.log("Next week button not found or seat found, retrying...");
            setTimeout(step7, 2000); // Retry after 2 seconds if button is missing
        }
    }

    function goToPreviousWeek() {
        if (!isScriptRunning) {
            console.log("Script is stopped, skipping goToPreviousWeek.");
            return;
        }

        if (isPopupVisible) {
            console.log("Script paused due to popup. Please dismiss the pop-up manually.");
            return;
        }

        console.log("Attempting to go to previous week...");
        const previousWeekButton = document.querySelector('#searchForWeeklySlotsPreviousWeek');
        if (previousWeekButton && !foundSeat) {
            console.log("Previous week button found, attempting click...");
            setTimeout(() => {
                if (checkForPopup()) return; // Check popup before clicking
                previousWeekButton.click();
                console.log("Clicked on previous week button");
                setTimeout(step6, 8000);
            }, nextWeekDelay);
        } else {
            console.log("Previous week button not found or seat found, switching to forward...");
            searchDirection = "forward";
            currentWeekIndex = 0;
            backwardWeekIndex = 0;
            step7(); // Loop back to forward if no previous week available
        }
    }

    function startSearch() {
        if (!isScriptRunning) {
            console.log("Script is stopped, skipping startSearch.");
            return;
        }

        console.log("Starting search...");
        currentWeekIndex = 0;
        backwardWeekIndex = 0;
        searchDirection = "forward";
        foundSeat = false;
        step6(); // Kick off the search
    }

    // Popup check function (unchanged for brevity, assume itâ€™s the same)
    function checkForPopup() {
        const popup = document.querySelector('.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front');
        if (popup) {
            const popupText = popup.textContent || popup.innerText;
            if (popupText.includes("Currently no tests are available")) {
                isPopupVisible = false;
                return false;
            }
            const isVisible = window.getComputedStyle(popup).display !== 'none' && window.getComputedStyle(popup).visibility !== 'hidden';
            if (isVisible) {
                console.log("Blocking popup detected. Pausing the script...");
                showToast("Blocking popup detected. Please dismiss it manually.");
                isPopupVisible = true;
                return true;
            }
        }
        if (isPopupVisible) {
            console.log("Popup dismissed, resuming script...");
            isPopupVisible = false;
            step6(); // Resume where it left off
        }
        return false;
    }

// Add keyboard shortcut to stop the script (Ctrl + Shift + S)
    document.addEventListener('keydown', (event) => {
        if (event.ctrlKey && event.shiftKey && event.key === 'S') {
            stopScript();
            event.preventDefault(); // Prevent default browser behavior
        }
    });

    // Start the script
    window.addEventListener('load', () => {
        console.log("Page loaded, starting script...");
        randomDelay(startSearch);
    });

    setInterval(checkForPopup, 1000); // Check for popup every second

    // Toast styles (unchanged, assume itâ€™s the same)
    (function createToastContainer() {
        const style = document.createElement('style');
        style.innerHTML = `
            .toast {
                visibility: hidden;
                min-width: 250px;
                margin-left: -125px;
                background-color: #333;
                color: #fff;
                text-align: center;
                border-radius: 2px;
                padding: 16px;
                position: fixed;
                z-index: 10000;
                left: 50%;
                bottom: 30px;
                font-size: 17px;
            }
            .toast.show {
                visibility: visible;
                -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
                animation: fadein 0.5s, fadeout 0.5s 2.5s;
            }
            @-webkit-keyframes fadein { from {bottom: 0; opacity: 0;} to {bottom: 30px; opacity: 1;} }
            @keyframes fadein { from {bottom: 0; opacity: 0;} to {bottom: 30px; opacity: 1;} }
            @-webkit-keyframes fadeout { from {bottom: 30px; opacity: 1;} to {bottom: 0; opacity: 0;} }
            @keyframes fadeout { from {bottom: 30px; opacity: 1;} to {bottom: 0; opacity: 0;} }
        `;
        document.head.appendChild(style);
    })();
})();
