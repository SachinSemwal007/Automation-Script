// ==UserScript==
// @name         DVSA Driving Test Booking Automation (Debug 2.9-simple)
// @namespace    http://tampermonkey.net/
// @version      2.9-simple
// @description  Debug version with simplified looping, stop functionality, and enhanced logging
// @include      https://driver-services.dvsa.gov.uk/*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    console.log("Script Loaded and Running");

    const minDelay = 5000;
    const maxDelay = 10000;
    const nextWeekDelay = 4000;
    const weeksToSearch = 4; // Number of weeks to search forward AND backward (configurable)
    let currentWeekIndex = 0; // Tracks the current week in the forward direction
    let backwardWeekIndex = 0; // Tracks the current week in the backward direction
    let searchDirection = "forward"; // "forward" or "backward"
    let foundSeat = false; // Flag to stop the loop when a seat is found
    let isPopupVisible = false; // Track if popup is visible
    let isScriptRunning = true; // Flag to control script execution
    let isInitialDelayComplete = false; // Flag to ensure 15-second delay is respected

    // Function to stop the script (global for console access)
    window.stopScript = function () {
        isScriptRunning = false;
        console.log("Script stopped manually. To restart, reload the page or call startSearch() manually.");
        showToast("Script stopped manually.");
    };

    function randomIntBetween(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function randomDelay(callback) {
        const delay = randomIntBetween(minDelay, maxDelay); // Random delay between 5-10 seconds
        console.log(`Delaying for ${delay}ms before running callback`);
        setTimeout(() => {
            console.log("Callback executed");
            callback();
        }, delay);
    }

    function showToast(message) {
        const toast = document.createElement('div');
        toast.className = 'toast';
        toast.textContent = message;
        document.body.appendChild(toast);

        setTimeout(() => toast.classList.add('show'), 10);
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => document.body.removeChild(toast), 300);
        }, 3000);
    }

    function showAvailableDatesTable(availableDates) {
        const popup = document.createElement('div');
        popup.style.position = 'fixed';
        popup.style.top = '50%';
        popup.style.left = '50%';
        popup.style.transform = 'translate(-50%, -50%)';
        popup.style.backgroundColor = '#fff';
        popup.style.padding = '20px';
        popup.style.border = '1px solid #ccc';
        popup.style.borderRadius = '8px';
        popup.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';
        popup.style.zIndex = '10000';
        popup.style.fontFamily = 'Arial, sans-serif';

        const title = document.createElement('h3');
        title.textContent = 'Available Test Dates';
        title.style.marginTop = '0';
        popup.appendChild(title);

        const table = document.createElement('table');
        table.style.width = '100%';
        table.style.borderCollapse = 'collapse';

        const headerRow = document.createElement('tr');
        const headerDay = document.createElement('th');
        headerDay.textContent = 'Day';
        headerDay.style.padding = '8px';
        headerDay.style.borderBottom = '2px solid #007bff';
        headerRow.appendChild(headerDay);

        const headerDate = document.createElement('th');
        headerDate.textContent = 'Date';
        headerDate.style.padding = '8px';
        headerDate.style.borderBottom = '2px solid #007bff';
        headerRow.appendChild(headerDate);

        table.appendChild(headerRow);

        availableDates.forEach(date => {
            const row = document.createElement('tr');
            const cellDay = document.createElement('td');
            cellDay.textContent = date.split(', ')[0]; // Extract day (e.g., "Wednesday")
            cellDay.style.padding = '8px';
            cellDay.style.borderBottom = '1px solid #eee';
            row.appendChild(cellDay);

            const cellDate = document.createElement('td');
            cellDate.textContent = date.split(', ').slice(1).join(', '); // Extract full date
            cellDate.style.padding = '8px';
            cellDate.style.borderBottom = '1px solid #eee';
            row.appendChild(cellDate);

            table.appendChild(row);
        });

        popup.appendChild(table);

        const closeButton = document.createElement('button');
        closeButton.textContent = 'Close';
        closeButton.style.marginTop = '10px';
        closeButton.style.padding = '8px 16px';
        closeButton.style.backgroundColor = '#007bff';
        closeButton.style.color = '#fff';
        closeButton.style.border = 'none';
        closeButton.style.borderRadius = '4px';
        closeButton.style.cursor = 'pointer';

        closeButton.addEventListener('click', () => {
            document.body.removeChild(popup);
        });

        popup.appendChild(closeButton);

        document.body.appendChild(popup);
    }

    function getWeekRange() {
        const today = new Date();
        const startDate = today.toLocaleDateString('en-US', { day: 'numeric', month: 'short', year: 'numeric' });
        return { startDate: startDate }; // e.g., "18 Mar 2025"
    }

    function checkForPopup() {
        const popup = document.querySelector('.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front');
        if (popup) {
            const popupText = popup.textContent || popup.innerText;
            // Handle "Currently no tests are available" popup
            if (popupText.includes("Currently no tests are available")) {
                isPopupVisible = false;
                return false;
            }
            // Handle the warning popup
            if (popupText.includes("Only use the buttons on the web page to move around the service")) {
                console.log("Warning popup detected: 'Only use the buttons on the web page...'");
                const okayButton = popup.querySelector('button') || popup.querySelector('input[type="button"][value="Okay, thanks"]');
                if (okayButton) {
                    console.log("Clicking 'Okay, thanks' button to dismiss warning popup...");
                    okayButton.click();
                    isPopupVisible = false;
                    return false; // Allow script to continue after dismissing
                } else {
                    console.log("Warning popup detected but 'Okay, thanks' button not found. Pausing script...");
                    showToast("Warning popup detected. Please dismiss it manually.");
                    isPopupVisible = true;
                    return true;
                }
            }
            const isVisible = window.getComputedStyle(popup).display !== 'none' && window.getComputedStyle(popup).visibility !== 'hidden';
            if (isVisible) {
                console.log("Blocking popup detected. Pausing the script...");
                showToast("Blocking popup detected. Please dismiss it manually.");
                isPopupVisible = true;
                return true;
            }
        }
        if (isPopupVisible && isInitialDelayComplete) {
            console.log("Popup dismissed, resuming script...");
            isPopupVisible = false;
            step6(); // Resume only if initial delay is complete
        }
        return false;
    }

    function step6() {
        if (!isScriptRunning) {
            console.log("Script is stopped, skipping step6.");
            return;
        }

        if (!isInitialDelayComplete) {
            console.log("Initial 15-second delay not complete, skipping step6.");
            return;
        }

        if (isPopupVisible) {
            console.log("Script paused due to popup. Please dismiss the pop-up manually.");
            return;
        }

        console.log(`Running Step 6 - Week ${searchDirection === "forward" ? currentWeekIndex + 1 : backwardWeekIndex + 1}/${weeksToSearch}, Direction: ${searchDirection}`);

        const weekRange = getWeekRange();
        if (!weekRange) {
            console.log("Could not determine the week range");
            return;
        }

        const [startDay, startMonth, startYear] = weekRange.startDate.split(' ');
        const month = startMonth;
        const year = startYear;

        const dateCells = document.querySelectorAll('.day.none, .day.nonenonotif');
        console.log("Found date cells:", dateCells.length);
        let availableDates = [];

        dateCells.forEach(cell => {
            if (cell.classList.contains('slotsavailable')) {
                const dateLink = cell.querySelector('a');
                if (dateLink) {
                    const dateText = dateLink.textContent.trim();
                    if (dateText && !isNaN(parseInt(dateText))) {
                        const parsedDate = new Date(`${dateText} ${month} ${year}`);
                        if (!isNaN(parsedDate.getTime())) {
                            availableDates.push({
                                day: parsedDate.toLocaleString('en-US', { weekday: 'long' }),
                                date: dateText
                            });
                        }
                    }
                }
            }
        });

        if (availableDates.length > 0) {
            foundSeat = true;
            const formattedDates = availableDates.map(({ day, date }) => `${day}, ${date} ${month} ${year}`);
            console.log("Available dates this week:", formattedDates);
            showAvailableDatesTable(formattedDates);
            showToast("Seat available!");
            return; // Stop when a seat is found
        } else {
            console.log("No available dates found in this week");
            showToast("No dates available");
        }

        if (!foundSeat) {
            if (searchDirection === "forward" && currentWeekIndex < weeksToSearch - 1) {
                console.log("Moving to next week forward...");
                currentWeekIndex++;
                step7();
            } else if (searchDirection === "forward" && currentWeekIndex === weeksToSearch - 1) {
                console.log("Reached end of forward search, switching to backward...");
                searchDirection = "backward";
                backwardWeekIndex = 0; // Start backward from the current point
                goToPreviousWeek();
            } else if (searchDirection === "backward" && backwardWeekIndex < weeksToSearch - 1) {
                console.log("Moving to previous week backward...");
                backwardWeekIndex++;
                goToPreviousWeek();
            } else if (searchDirection === "backward" && backwardWeekIndex === weeksToSearch - 1) {
                console.log("Reached end of backward search, looping back to forward...");
                searchDirection = "forward";
                currentWeekIndex = 0; // Reset to start forward again
                step7();
            }
        }
    }

    function step7() {
        if (!isScriptRunning) {
            console.log("Script is stopped, skipping step7.");
            return;
        }

        if (!isInitialDelayComplete) {
            console.log("Initial 15-second delay not complete, skipping step7.");
            return;
        }

        if (isPopupVisible) {
            console.log("Script paused due to popup. Please dismiss the pop-up manually.");
            return;
        }

        console.log(`Running Step 7 - Direction: ${searchDirection}`);
        const nextWeekLink = document.querySelector('#searchForWeeklySlotsNextWeek');

        if (nextWeekLink && !foundSeat) {
            console.log("Next week button found, attempting click...");
            setTimeout(() => {
                if (checkForPopup()) return; // Check popup before clicking
                nextWeekLink.click();
                console.log("Clicked on next week link");
                showToast("Checking availability for next week...");

                // Add a random pause every 2 weeks to avoid rate limiting
                const pauseAfterWeeks = 2;
                if (searchDirection === "forward" && currentWeekIndex % pauseAfterWeeks === 0 && currentWeekIndex !== 0) {
                    console.log(`Pausing for 10 seconds after ${pauseAfterWeeks} weeks to avoid rate limiting...`);
                    setTimeout(() => {
                        setTimeout(step6, randomIntBetween(5000, 8000));
                    }, 10000); // 10-second pause
                } else {
                    setTimeout(step6, randomIntBetween(5000, 8000));
                }
            }, randomIntBetween(1000, 3000)); // Random delay before click (1-3 seconds)
        } else {
            console.log("Next week button not found or seat found, retrying...");
            setTimeout(step7, 2000); // Retry after 2 seconds if button is missing
        }
    }

    function goToPreviousWeek() {
        if (!isScriptRunning) {
            console.log("Script is stopped, skipping goToPreviousWeek.");
            return;
        }

        if (!isInitialDelayComplete) {
            console.log("Initial 15-second delay not complete, skipping goToPreviousWeek.");
            return;
        }

        if (isPopupVisible) {
            console.log("Script paused due to popup. Please dismiss the pop-up manually.");
            return;
        }

        console.log("Attempting to go to previous week...");
        const previousWeekButton = document.querySelector('#searchForWeeklySlotsPreviousWeek');
        if (previousWeekButton && !foundSeat) {
            console.log("Previous week button found, attempting click...");
            setTimeout(() => {
                if (checkForPopup()) return; // Check popup before clicking
                previousWeekButton.click();
                console.log("Clicked on previous week button");

                // Add a random pause every 2 weeks to avoid rate limiting
                const pauseAfterWeeks = 2;
                if (searchDirection === "backward" && backwardWeekIndex % pauseAfterWeeks === 0 && backwardWeekIndex !== 0) {
                    console.log(`Pausing for 10 seconds after ${pauseAfterWeeks} weeks to avoid rate limiting...`);
                    setTimeout(() => {
                        setTimeout(step6, randomIntBetween(5000, 8000));
                    }, 10000); // 10-second pause
                } else {
                    setTimeout(step6, randomIntBetween(5000, 8000));
                }
            }, randomIntBetween(1000, 3000)); // Random delay before click (1-3 seconds)
        } else {
            console.log("Previous week button not found or seat found, switching to forward...");
            searchDirection = "forward";
            currentWeekIndex = 0;
            backwardWeekIndex = 0;
            step7(); // Loop back to forward if no previous week available
        }
    }

    function startSearch() {
        if (!isScriptRunning) {
            console.log("Script is stopped, skipping startSearch.");
            return;
        }

        if (!isInitialDelayComplete) {
            console.log("Initial 15-second delay not complete, skipping startSearch.");
            return;
        }

        console.log("Starting search...");
        currentWeekIndex = 0;
        backwardWeekIndex = 0;
        searchDirection = "forward";
        foundSeat = false;
        step6(); // Kick off the search
    }

    // Start the script with a 15-second delay
    window.addEventListener('load', () => {
        console.log("Page loaded, waiting 15 seconds before starting script...");
        setTimeout(() => {
            console.log("15-second delay complete, starting script...");
            isInitialDelayComplete = true; // Mark the delay as complete
            randomDelay(startSearch);
        }, 15000); // 15-second delay (15000ms)
    });

    setInterval(checkForPopup, 1000); // Check for popup every second

    // Toast styles
    (function createToastContainer() {
        const style = document.createElement('style');
        style.innerHTML = `
            .toast {
                visibility: hidden;
                min-width: 250px;
                margin-left: -125px;
                background-color: #333;
                color: #fff;
                text-align: center;
                border-radius: 2px;
                padding: 16px;
                position: fixed;
                z-index: 10000;
                left: 50%;
                bottom: 30px;
                font-size: 17px;
            }
            .toast.show {
                visibility: visible;
                -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
                animation: fadein 0.5s, fadeout 0.5s 2.5s;
            }
            @-webkit-keyframes fadein { from {bottom: 0; opacity: 0;} to {bottom: 30px; opacity: 1;} }
            @keyframes fadein { from {bottom: 0; opacity: 0;} to {bottom: 30px; opacity: 1;} }
            @-webkit-keyframes fadeout { from {bottom: 30px; opacity: 1;} to {bottom: 0; opacity: 0;} }
            @keyframes fadeout { from {bottom: 30px; opacity: 1;} to {bottom: 0; opacity: 0;} }
        `;
        document.head.appendChild(style);
    })();

    // Add keyboard shortcut to stop the script (Ctrl + Shift + S)
    document.addEventListener('keydown', (event) => {
        if (event.ctrlKey && event.shiftKey && event.key === 'S') {
            window.stopScript(); // Explicitly call the global function
            event.preventDefault(); // Prevent default browser behavior
        }
    })();
})();
