// ==UserScript==
// @name         DVSA NextAvailableDate (Simplified 1.0.13)
// @namespace    http://tampermonkey.net/
// @version      1.0.13
// @description  Simplifies DVSA driving test booking by immediately clicking the first available slot and the Reserve button. Forces navigation to the Reserve button's href to bypass click issues, adds retry mechanism if navigation fails, increases delay before confirmation check, and improves logging. Includes anti-bot measures (random delays, scrolling, mouse simulation), strict page detection, session timeout handling, popup handling, network checks, stop with Ctrl+Shift+S, and restart with Ctrl+Shift+R.
// @include      https://driver-services.dvsa.gov.uk/*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    console.log("Simplified Script Loaded and Running");

    const minDelay = 5000; // 5 seconds
    const maxDelay = 10000; // 10 seconds
    const waitForElementTimeout = 3000; // 3 seconds to wait for elements to load
    const retryAttempts = 3; // Retry finding the Reserve button 3 times
    const retryDelay = 500; // 0.5 seconds between retries
    let searchDirection = "forward";
    let isScriptRunning = true;
    let isBusy = false;
    let isOnSlotDetailsPage = false; // Track if we're on the slot details page

    window.stopScript = function () {
        isScriptRunning = false;
        isOnSlotDetailsPage = false;
        console.log("Script stopped manually. Press Ctrl+Shift+R to restart.");
        showToast("Script stopped. Press Ctrl+Shift+R to restart.");
    };

    window.restartScript = function () {
        console.log("Restarting script without page refresh...");
        isScriptRunning = true;
        searchDirection = "forward";
        isBusy = false;
        isOnSlotDetailsPage = false;
        showToast("Script restarted!");
        randomDelay(checkForAvailableDate);
    };

    function randomIntBetween(min, max) {
        const mean = (max + min) / 2;
        const stdDev = (max - min) / 6;
        let value;
        do {
            value = mean + stdDev * (Math.random() * 2 - 1) * 2;
        } while (value < min || value > max);
        return Math.floor(value);
    }

    function randomDelay(callback) {
        const delay = randomIntBetween(minDelay, maxDelay);
        console.log(`Scheduling next action in ${delay/1000} seconds...`);
        setTimeout(callback, delay);
    }

    function showToast(message) {
        const toast = document.createElement('div');
        toast.className = 'toast';
        toast.textContent = message;
        document.body.appendChild(toast);
        setTimeout(() => toast.classList.add('show'), 10);
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }

    function simulateHumanBehavior() {
        const scrollAmount = Math.random() * 500 - 250;
        window.scrollBy(0, scrollAmount);
        console.log(`Simulated scroll by ${scrollAmount}px`);

        const mouseEvent = new Event('mousemove', { bubbles: true });
        document.dispatchEvent(mouseEvent);
        console.log("Simulated mouse movement");
    }

    function waitForElement(selector, timeout = waitForElementTimeout) {
        return new Promise((resolve, reject) => {
            console.log(`Waiting for element: ${selector}, timeout: ${timeout}ms`);
            const element = document.querySelector(selector);
            if (element) {
                console.log(`Element ${selector} found immediately`);
                resolve(element);
                return;
            }

            let observer;
            try {
                observer = new MutationObserver((mutations, obs) => {
                    const el = document.querySelector(selector);
                    if (el) {
                        console.log(`Element ${selector} found via MutationObserver`);
                        obs.disconnect();
                        resolve(el);
                    }
                });

                observer.observe(document.body, { childList: true, subtree: true });

                setTimeout(() => {
                    observer.disconnect();
                    reject(new Error(`Element ${selector} not found within ${timeout}ms`));
                }, timeout);
            } catch (err) {
                if (observer) observer.disconnect();
                reject(err);
            }
        });
    }

    function checkForSessionTimeout() {
        const sessionExpiredText = document.querySelector('body')?.textContent || '';
        const loginForm = document.querySelector('input[type="password"], input[type="email"], input[type="text"][name*="username"]');
        if (
            sessionExpiredText.includes("Session expired") ||
            sessionExpiredText.includes("Log in") ||
            sessionExpiredText.includes("Please sign in") ||
            loginForm
        ) {
            console.log("Session timeout or login page detected.");
            showToast("Session expired. Please log in again and restart the script with Ctrl+Shift+R.");
            stopScript();
            return true;
        }
        return false;
    }

    function isOnSlotDetailsPageCheck() {
        const dateCells = document.querySelectorAll('.day.none, .day.nonenonotif, .slotsavailable, td.day');
        const isDateSelectionPage = dateCells.length > 0;

        const slotDetailsIndicators = document.querySelectorAll('a[href*="reserve"], a[href*="reserveSlot"], a[id*="reserve"], a[id*="book"]');
        const pageText = document.body.textContent || '';
        const hasSlotDetailsText = (pageText.includes("Test type") && pageText.includes("Time Price") && pageText.includes("Tests available")) || pageText.includes("Reserve test") || pageText.includes("Just book this test") || pageText.includes("Reserve another");
        const hasReturnToSearch = pageText.includes("Return to search results");

        const result = !isDateSelectionPage && (isOnSlotDetailsPage || (slotDetailsIndicators.length > 0 && hasSlotDetailsText && hasReturnToSearch));
        console.log(`Checking if on slot details page: isOnSlotDetailsPage=${isOnSlotDetailsPage}, isDateSelectionPage=${isDateSelectionPage}, slotDetailsIndicators=${slotDetailsIndicators.length}, hasSlotDetailsText=${hasSlotDetailsText}, hasReturnToSearch=${hasReturnToSearch}, Result=${result}`);

        return result;
    }

    async function checkForAvailableDate() {
        if (!isScriptRunning) {
            console.log("Script stopped, skipping checkForAvailableDate.");
            return;
        }

        if (isBusy) {
            console.log("Script busy, retrying checkForAvailableDate...");
            setTimeout(checkForAvailableDate, 1000);
            return;
        }

        if (!navigator.onLine) {
            console.log("No internet connection detected. Pausing script...");
            showToast("No internet connection. Script paused. Will resume when online...");
            setTimeout(checkForAvailableDate, 5000);
            return;
        }

        if (checkForSessionTimeout()) {
            isBusy = false;
            return;
        }

        if (checkForPopup()) {
            console.log("Popup detected, pausing until dismissed...");
            setTimeout(checkForAvailableDate, 3000);
            return;
        }

        if (isOnSlotDetailsPageCheck()) {
            console.log("Detected slot details page, proceeding to reserve...");
            isOnSlotDetailsPage = true;
            isBusy = false;
            reserveTestSlot();
            return;
        }

        isBusy = true;
        console.log(`Checking for available date, Direction: ${searchDirection}`);

        let dateCells;
        try {
            dateCells = document.querySelectorAll('.day.none, .day.nonenonotif, .slotsavailable');
            console.log(`Found ${dateCells.length} date cells with primary selector`);
            if (dateCells.length === 0) {
                console.log("No date cells found with primary selector, trying fallback...");
                dateCells = document.querySelectorAll('td.day');
                console.log(`Fallback: Found ${dateCells.length} date cells`);
            }
        } catch (err) {
            console.error("Error querying date cells:", err);
            isBusy = false;
            randomDelay(checkForAvailableDate);
            return;
        }

        if (dateCells.length === 0) {
            console.log("No date cells found, navigating to next/previous available date...");
            navigateToNextOrPrevious();
            return;
        }

        for (let cell of dateCells) {
            if (cell.classList.contains('slotsavailable')) {
                const dateLink = cell.querySelector('a');
                if (dateLink) {
                    console.log("Available slot found, clicking immediately...");
                    showToast("Slot found! Clicking to view details...");
                    dateLink.click();
                    isBusy = false;
                    isOnSlotDetailsPage = true;
                    console.log(`Set isOnSlotDetailsPage to true after clicking slot`);
                    reserveTestSlot();
                    return;
                }
            }
        }

        console.log("No available dates found");
        showToast("No dates available");
        navigateToNextOrPrevious();
    }

    function navigateToNextOrPrevious() {
        if (!isScriptRunning) {
            console.log("Script stopped, skipping navigation.");
            isBusy = false;
            return;
        }

        if (checkForSessionTimeout()) {
            isBusy = false;
            return;
        }

        if (isOnSlotDetailsPageCheck()) {
            console.log("On slot details page, attempting to click Reserve button again...");
            isOnSlotDetailsPage = true;
            isBusy = false;
            reserveTestSlot();
            return;
        }

        const dateCells = document.querySelectorAll('.day.none, .day.nonenonotif, .slotsavailable, td.day');
        if (dateCells.length === 0) {
            console.log("Not on date selection page, checking for popups or session issues...");
            if (checkForPopup()) {
                console.log("Popup still present, waiting...");
                isBusy = false;
                setTimeout(checkForAvailableDate, 3000);
                return;
            }
            console.log("Possibly on a different page. Attempting to recover by checking context...");
            showToast("Not on date selection page. Attempting to recover...");
            isBusy = false;
            randomDelay(checkForAvailableDate);
            return;
        }

        simulateHumanBehavior();

        let navigationLink;
        let directionText;
        if (searchDirection === "forward") {
            navigationLink = document.querySelector('#searchForWeeklySlotsNextAvailable');
            directionText = "next available date";
        } else {
            navigationLink = document.querySelector('#searchForWeeklySlotsPreviousAvailable');
            directionText = "previous available date";
        }

        if (navigationLink) {
            navigationLink.click();
            console.log(`Clicked ${directionText} link`);
            showToast(`Checking ${directionText}...`);

            waitForElement('.day.none, .day.nonenonotif, .slotsavailable', waitForElementTimeout)
                .then(() => {
                    console.log("Date slots updated, proceeding...");
                    searchDirection = searchDirection === "forward" ? "backward" : "forward";
                    isBusy = false;
                    randomDelay(checkForAvailableDate);
                })
                .catch((err) => {
                    console.error("Failed to load date slots:", err);
                    showToast(`Error loading ${directionText}. Retrying...`);
                    searchDirection = searchDirection === "forward" ? "backward" : "forward";
                    isBusy = false;
                    randomDelay(checkForAvailableDate);
                });
        } else {
            console.log(`${directionText} button missing`);
            showToast(`${directionText} button not found. Switching direction...`);
            searchDirection = searchDirection === "forward" ? "backward" : "forward";
            isBusy = false;
            randomDelay(checkForAvailableDate);
        }
    }

    function checkForPopup() {
        let popup;
        try {
            popup = document.querySelector('.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front');
        } catch (err) {
            console.error("Error checking for popup:", err);
            return false;
        }

        if (popup) {
            const popupText = popup.textContent || popup.innerText;
            console.log("Popup detected with text:", popupText);

            if (
                popupText.includes("Currently no tests are available") ||
                popupText.includes("Too many requests") ||
                popupText.includes("Session expired") ||
                popupText.includes("Connection error") ||
                popupText.includes("Slot no longer available")
            ) {
                let closeButton;
                try {
                    closeButton = popup.querySelector('.ui-button.ui-corner-all.ui-widget');
                } catch (err) {
                    console.error("Error finding close button:", err);
                }
                if (closeButton) {
                    closeButton.click();
                    console.log("Auto-closed popup:", popupText);
                    isOnSlotDetailsPage = false;
                    return false;
                }
            }

            const isVisible = window.getComputedStyle(popup).display !== 'none' && window.getComputedStyle(popup).visibility !== 'hidden';
            if (isVisible) {
                console.log("Blocking popup detected. Please dismiss manually.");
                showToast("Popup detected. Please dismiss manually.");
                return true;
            }
        }
        return false;
    }

    async function reserveTestSlot() {
        if (!isScriptRunning) {
            console.log("Script stopped, skipping reserveTestSlot.");
            return;
        }

        console.log("Looking for Reserve button...");
        const initialUrl = window.location.href;
        console.log(`Current URL before finding Reserve button: ${initialUrl}`);

        let reserveButton = null;
        let attempt = 1;

        while (attempt <= retryAttempts && !reserveButton) {
            console.log(`Attempt ${attempt} to find Reserve button...`);
            try {
                reserveButton = document.querySelector('a[href*="/reserve"], a[href*="reserveSlot"], a[id*="reserve"], a[id*="book"]');
                if (!reserveButton) {
                    const allLinksAndButtons = document.querySelectorAll('a, button, input[type="submit"]');
                    for (let element of allLinksAndButtons) {
                        const textContent = element.textContent || element.innerText || element.value || '';
                        if (
                            textContent.toLowerCase() === 'reserve test' ||
                            textContent.toLowerCase() === 'book test' ||
                            textContent.toLowerCase() === 'just book this test' ||
                            textContent.toLowerCase().includes('reserve another')
                        ) {
                            const parentText = element.closest('td, div')?.textContent || '';
                            if (
                                (parentText.includes('Test type') && parentText.includes('Time Price') && parentText.includes('Tests available')) ||
                                (parentText.includes('Reserve test') && parentText.includes('Return to search results')) ||
                                (parentText.includes('Just book this test') && parentText.includes('Return to search results')) ||
                                (parentText.includes('Reserve another') && parentText.includes('Return to search results'))
                            ) {
                                reserveButton = element;
                                console.log("Found Reserve button by text content:", textContent);
                                break;
                            }
                        }
                    }
                }
                if (reserveButton) {
                    console.log("Found Reserve button:", reserveButton);
                }
            } catch (err) {
                console.error("Error querying Reserve button:", err);
            }

            if (!reserveButton && attempt < retryAttempts) {
                console.log(`Reserve button not found, retrying in ${retryDelay}ms...`);
                await new Promise(resolve => setTimeout(resolve, retryDelay));
                attempt++;
            } else {
                break;
            }
        }

        if (reserveButton) {
            const surroundingText = reserveButton.closest('td')?.textContent.trim() || reserveButton.closest('div')?.textContent.trim() || reserveButton.textContent.trim() || "unknown";
            console.log(`Found Reserve button with text: ${surroundingText}`);
            console.log(`Reserve button href: ${reserveButton.href || 'N/A'}`);

            const isDisabled = reserveButton.hasAttribute('disabled') || reserveButton.classList.contains('disabled');
            const computedStyle = window.getComputedStyle(reserveButton);
            const isVisible = reserveButton.offsetParent !== null && computedStyle.display !== 'none' && computedStyle.visibility !== 'hidden' && computedStyle.opacity !== '0';
            const boundingRect = reserveButton.getBoundingClientRect();
            const isInteractable = boundingRect.width > 0 && boundingRect.height > 0;
            console.log(`Reserve button state: isDisabled=${isDisabled}, isVisible=${isVisible}, isInteractable=${isInteractable}, href=${reserveButton.href || 'N/A'}`);

            if (isDisabled) {
                console.log("Reserve button is disabled.");
                showToast("Reserve button is disabled. Returning to date selection...");
                isOnSlotDetailsPage = false;
                randomDelay(checkForAvailableDate);
                return;
            }

            if (!isVisible || !isInteractable) {
                console.log("Reserve button is not visible or interactable, attempting to make it visible...");
                reserveButton.scrollIntoView({ behavior: 'smooth', block: 'center' });
                reserveButton.style.display = 'block';
                reserveButton.style.visibility = 'visible';
                reserveButton.style.opacity = '1';
                const updatedStyle = window.getComputedStyle(reserveButton);
                const isNowVisible = reserveButton.offsetParent !== null && updatedStyle.display !== 'none' && updatedStyle.visibility !== 'hidden' && updatedStyle.opacity !== '0';
                const updatedRect = reserveButton.getBoundingClientRect();
                const isNowInteractable = updatedRect.width > 0 && updatedRect.height > 0;
                if (!isNowVisible || !isNowInteractable) {
                    console.log("Reserve button still not visible or interactable.");
                    showToast("Reserve button is not visible or interactable. Returning to date selection...");
                    isOnSlotDetailsPage = false;
                    randomDelay(checkForAvailableDate);
                    return;
                }
            }

            simulateHumanBehavior();

            showToast(`Reserving slot...`);
            let navigationSuccessful = false;
            try {
                // Attempt synthetic click
                const mouseDownEvent = new Event('mousedown', { bubbles: true, cancelable: true });
                const mouseUpEvent = new Event('mouseup', { bubbles: true, cancelable: true });
                const clickEvent = new Event('click', { bubbles: true, cancelable: true });
                reserveButton.dispatchEvent(mouseDownEvent);
                reserveButton.dispatchEvent(mouseUpEvent);
                const clickResult = reserveButton.dispatchEvent(clickEvent);
                console.log(`Click event dispatched, result: ${clickResult}`);

                // Force navigation to href
                if (reserveButton.href) {
                    console.log("Forcing navigation to href to ensure reservation...");
                    window.location.href = reserveButton.href;

                    // Wait briefly and check if URL changed
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    const currentUrl = window.location.href;
                    console.log(`Current URL after navigation attempt: ${currentUrl}`);
                    if (currentUrl !== initialUrl) {
                        console.log("Navigation successful: URL changed.");
                        navigationSuccessful = true;
                    } else {
                        console.log("Navigation failed: URL did not change. Retrying...");
                        // Retry navigation
                        window.location.href = reserveButton.href;
                        await new Promise(resolve => setTimeout(resolve, 1000));
                        const retryUrl = window.location.href;
                        console.log(`Current URL after retry: ${retryUrl}`);
                        if (retryUrl !== initialUrl) {
                            console.log("Navigation successful after retry: URL changed.");
                            navigationSuccessful = true;
                        } else {
                            throw new Error("Navigation failed after retry: URL did not change.");
                        }
                    }
                } else {
                    throw new Error("Reserve button has no href attribute.");
                }

                console.log("Reserve button clicked successfully.");
            } catch (err) {
                console.error("Error clicking Reserve button:", err);
                showToast("Error clicking Reserve button. Returning to date selection...");
                isOnSlotDetailsPage = false;
                randomDelay(checkForAvailableDate);
                return;
            }

            // Add delay before checking for confirmation to ensure page navigation
            await new Promise(resolve => setTimeout(resolve, 2000));
            console.log(`Current URL after delay: ${window.location.href}`);

            waitForElement('h1, .govuk-heading-l, [class*="confirmation"], [class*="success"]', waitForElementTimeout)
                .then((confirmationElement) => {
                    const confirmationText = confirmationElement.textContent.toLowerCase();
                    if (confirmationText.includes('confirm') || confirmationText.includes('success') || confirmationText.includes('booked')) {
                        console.log("Reservation confirmed! Stopping script...");
                        showToast("Booking successful! Script stopped.");
                        stopScript();
                    } else {
                        console.log("Confirmation page loaded, but success not confirmed:", confirmationText);
                        showToast("Booking may have succeeded. Please check manually.");
                        isOnSlotDetailsPage = false;
                        randomDelay(checkForAvailableDate);
                    }
                })
                .catch((err) => {
                    console.error("Failed to confirm reservation:", err);
                    showToast("Unable to confirm booking. Returning to date selection...");
                    isOnSlotDetailsPage = false;
                    randomDelay(checkForAvailableDate);
                });
        } else {
            console.log("No Reserve button found after retries.");
            showToast("No Reserve button found. Returning to date selection...");
            isOnSlotDetailsPage = false;
            randomDelay(checkForAvailableDate);
        }
    }

    document.addEventListener('keydown', (event) => {
        if (event.ctrlKey && event.shiftKey && event.key === 'S') {
            stopScript();
            event.preventDefault();
        }
    });

    document.addEventListener('keydown', (event) => {
        if (event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'r') {
            console.log("Ctrl+Shift+R detected, restarting script...");
            restartScript();
            event.preventDefault();
        }
    });

    document.addEventListener('keydown', (event) => {
        if (event.ctrlKey && event.key.toLowerCase() === 'r' && !event.shiftKey) {
            console.log("Ctrl+R detected, stopping and restarting script...");
            stopScript();
            restartScript();
            event.preventDefault();
        }
    });

    window.addEventListener('load', () => {
        console.log("Page loaded, starting script...");
        randomDelay(checkForAvailableDate);
    });

    window.addEventListener('online', () => {
        console.log("Internet connection restored. Resuming script...");
        showToast("Internet connection restored. Resuming script...");
        randomDelay(checkForAvailableDate);
    });

    window.addEventListener('offline', () => {
        console.log("Internet connection lost. Pausing script...");
        showToast("Internet connection lost. Script paused...");
    });

    setInterval(() => {
        if (checkForPopup()) {
            console.log("Popup still present, waiting...");
        }
    }, 3000);

    (function createToastContainer() {
        const style = document.createElement('style');
        style.innerHTML = `
            .toast {
                visibility: hidden;
                min-width: 250px;
                margin-left: -125px;
                background-color: #333;
                color: #fff;
                text-align: center;
                border-radius: 2px;
                padding: 16px;
                position: fixed;
                z-index: 10000;
                left: 50%;
                bottom: 30px;
                font-size: 17px;
            }
            .toast.show {
                visibility: visible;
                -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
                animation: fadein 0.5s, fadeout 0.5s 2.5s;
            }
            @-webkit-keyframes fadein { from {bottom: 0; opacity: 0;} to {bottom: 30px; opacity: 1;} }
            @keyframes fadein { from {bottom: 0; opacity: 0;} to {bottom: 30px; opacity: 1;} }
            @-webkit-keyframes fadeout { from {bottom: 30px; opacity: 1;} to {bottom: 0; opacity: 0;} }
            @keyframes fadeout { from {bottom: 30px; opacity: 1;} to {bottom: 0; opacity: 0;} }
        `;
        document.head.appendChild(style);
    })();
})();
