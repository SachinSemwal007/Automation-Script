// ==UserScript==
// @name         DVSA Driving Test Booking Automation (Debug 3.6-optimized)
// @namespace    http://tampermonkey.net/
// @version      3.6-optimized
// @description  Merged best of 3.1 and 3.5: reliable date cell detection, slower execution, restart with Ctrl+Shift+R
// @include      https://driver-services.dvsa.gov.uk/*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    console.log("Script Loaded and Running");

    const minDelay = 3000;
    const maxDelay = 7000;
    const navigationDelay = 3500;
    const weeksToSearch = 4;
    const minWaitAfterLoad = 3000;
    let currentWeekIndex = 0;
    let backwardWeekIndex = 0;
    let searchDirection = "forward";
    let foundSeat = false;
    let isPopupVisible = false;
    let isScriptRunning = true;
    let isBusy = false;
    let lastNavigationTime = Date.now();

    window.stopScript = function () {
        isScriptRunning = false;
        console.log("Script stopped manually. Press Ctrl+Shift+R to restart.");
        showToast("Script stopped. Press Ctrl+Shift+R to restart.");
    };

    window.restartScript = function () {
        if (isScriptRunning) {
            console.log("Script is already running. Stop it first with Ctrl+Shift+S if needed.");
            showToast("Script already running!");
            return;
        }
        console.log("Restarting script without page refresh...");
        isScriptRunning = true;
        isPopupVisible = false;
        isBusy = false;
        currentWeekIndex = 0;
        backwardWeekIndex = 0;
        searchDirection = "forward";
        foundSeat = false;
        lastNavigationTime = Date.now();
        showToast("Script restarted!");
        randomDelay(startSearch);
    };

    function randomIntBetween(min, max) {
        const mean = (max + min) / 2;
        const stdDev = (max - min) / 6;
        let value;
        do {
            value = mean + stdDev * (Math.random() * 2 - 1) * 2;
        } while (value < min || value > max);
        return Math.floor(value);
    }

    function randomDelay(callback) {
        const delay = randomIntBetween(minDelay, maxDelay);
        console.log(`Delaying for ${delay}ms`);
        setTimeout(callback, delay);
    }

    function clickWithDelay(element, callback) {
        const clickDelay = randomIntBetween(500, 1500);
        console.log(`Waiting ${clickDelay}ms before clicking...`);
        setTimeout(() => {
            element.click();
            console.log("Element clicked");
            callback();
        }, clickDelay);
    }

    function showToast(message) {
        const toast = document.createElement('div');
        toast.className = 'toast';
        toast.textContent = message;
        document.body.appendChild(toast);
        setTimeout(() => toast.classList.add('show'), 10);
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }

    function getWeekRange() {
        const today = new Date();
        const startDate = today.toLocaleDateString('en-US', { day: 'numeric', month: 'short', year: 'numeric' });
        const [day, month, year] = startDate.split(' ');
        return { startDate, day, month, year };
    }

    function waitForElement(selector, timeout = 12000) {
        return new Promise((resolve, reject) => {
            const element = document.querySelector(selector);
            if (element) {
                resolve(element);
                return;
            }

            let observer;
            try {
                observer = new MutationObserver((mutations, obs) => {
                    const el = document.querySelector(selector);
                    if (el) {
                        obs.disconnect();
                        resolve(el);
                    }
                });

                observer.observe(document.body, { childList: true, subtree: true });

                const onPageChange = () => {
                    observer.disconnect();
                    reject(new Error(`Page navigation detected while waiting for ${selector}`));
                };
                window.addEventListener('beforeunload', onPageChange, { once: true });

                setTimeout(() => {
                    observer.disconnect();
                    window.removeEventListener('beforeunload', onPageChange);
                    reject(new Error(`Element ${selector} not found within ${timeout}ms`));
                }, timeout);
            } catch (err) {
                if (observer) observer.disconnect();
                reject(err);
            }
        });
    }

    function step6() {
        if (!isScriptRunning) {
            console.log("Script stopped, skipping step6.");
            return;
        }

        if (isPopupVisible) {
            console.log("Paused due to popup. Awaiting manual dismissal.");
            return;
        }

        if (isBusy) {
            console.log("Script busy, retrying step6...");
            setTimeout(step6, 1500);
            return;
        }

        isBusy = true;
        console.log(`Step 6 - Week ${searchDirection === "forward" ? currentWeekIndex + 1 : backwardWeekIndex + 1}/${weeksToSearch}, Direction: ${searchDirection}`);

        const weekRange = getWeekRange();
        if (!weekRange) {
            console.error("Failed to determine week range");
            isBusy = false;
            randomDelay(step6);
            return;
        }

        const { day, month, year } = weekRange;
        let dateCells;

        // Wait for the calendar table to ensure it's loaded
        waitForElement('table.slots-table', 12000)
            .then(() => {
                try {
                    dateCells = document.querySelectorAll('table.slots-table td.day:not(.not-this-month)');
                    console.log(`Found ${dateCells.length} date cells`);
                    if (dateCells.length === 0) {
                        console.log("No date cells found with primary selector, trying fallback...");
                        dateCells = document.querySelectorAll('td.day');
                        console.log(`Fallback: Found ${dateCells.length} date cells`);
                    }
                } catch (err) {
                    console.error("Error querying date cells:", err);
                    isBusy = false;
                    randomDelay(step6);
                    return;
                }

                if (dateCells.length === 0) {
                    console.log("No date cells found, retrying after delay...");
                    isBusy = false;
                    setTimeout(step6, minWaitAfterLoad);
                    return;
                }

                let availableDates = [];
                dateCells.forEach(cell => {
                    const hasSlots = cell.classList.contains('slotsavailable');
                    const dateLink = cell.querySelector('a');
                    if (hasSlots && dateLink) {
                        const dateText = dateLink.textContent.trim();
                        if (dateText && !isNaN(parseInt(dateText))) {
                            const parsedDate = new Date(`${dateText} ${month} ${year}`);
                            if (!isNaN(parsedDate.getTime())) {
                                availableDates.push({
                                    day: parsedDate.toLocaleString('en-US', { weekday: 'long' }),
                                    date: dateText
                                });
                            }
                        }
                    }
                });

                if (availableDates.length > 0) {
                    foundSeat = true;
                    const formattedDates = availableDates.map(({ day, date }) => `${day}, ${date} ${month} ${year}`);
                    console.log("Available dates:", formattedDates);
                    showToast("Seat available! Click to book.");
                    isBusy = false;
                    return;
                }

                console.log("No available dates found");
                showToast("No dates available");

                if (!foundSeat) {
                    if (searchDirection === "forward" && currentWeekIndex < weeksToSearch - 1) {
                        currentWeekIndex++;
                        randomDelay(step7);
                    } else if (searchDirection === "forward" && currentWeekIndex === weeksToSearch - 1) {
                        searchDirection = "backward";
                        backwardWeekIndex = 0;
                        randomDelay(goToPreviousWeek);
                    } else if (searchDirection === "backward" && backwardWeekIndex < weeksToSearch - 1) {
                        backwardWeekIndex++;
                        randomDelay(goToPreviousWeek);
                    } else {
                        searchDirection = "forward";
                        currentWeekIndex = 0;
                        backwardWeekIndex = 0;
                        randomDelay(step7);
                    }
                }
                isBusy = false;
            })
            .catch(err => {
                console.error("Failed to find calendar table:", err);
                isBusy = false;
                randomDelay(step6);
            });
    }

    function step7() {
        if (!isScriptRunning) {
            console.log("Script stopped, skipping step7.");
            return;
        }

        if (isPopupVisible) {
            console.log("Paused due to popup. Awaiting manual dismissal.");
            return;
        }

        if (isBusy) {
            console.log("Script busy, retrying step7...");
            setTimeout(step7, 1500);
            return;
        }

        const timeSinceLastNav = Date.now() - lastNavigationTime;
        if (timeSinceLastNav < navigationDelay) {
            console.log(`Waiting ${navigationDelay - timeSinceLastNav}ms to avoid rapid navigation`);
            setTimeout(step7, navigationDelay - timeSinceLastNav);
            return;
        }

        isBusy = true;
        console.log(`Step 7 - Direction: ${searchDirection}`);
        let nextWeekLink;
        try {
            nextWeekLink = document.querySelector('#searchForWeeklySlotsNextWeek');
        } catch (err) {
            console.error("Error querying next week link:", err);
            isBusy = false;
            randomDelay(step7);
            return;
        }

        if (nextWeekLink && !foundSeat) {
            if (checkForPopup()) {
                isBusy = false;
                return;
            }

            lastNavigationTime = Date.now();
            showToast("Checking next week...");
            clickWithDelay(nextWeekLink, () => {
                console.log("Clicked next week link");
                Promise.all([
                    waitForElement('table.slots-table td.day:not(.not-this-month)', 12000),
                    waitForElement('#main-iframe', 12000).catch(() => null)
                ])
                    .then(() => {
                        console.log("Calendar updated, proceeding...");
                        setTimeout(step6, minWaitAfterLoad);
                    })
                    .catch((err) => {
                        console.error("Failed to load calendar:", err);
                        showToast("Error loading next week. Retrying...");
                        setTimeout(step7, minDelay);
                    })
                    .finally(() => {
                        isBusy = false;
                    });
            });
        } else {
            console.log("Next week button missing or seat found");
            isBusy = false;
            randomDelay(step7);
        }
    }

    function goToPreviousWeek() {
        if (!isScriptRunning) {
            console.log("Script stopped, skipping goToPreviousWeek.");
            return;
        }

        if (isPopupVisible) {
            console.log("Paused due to popup. Awaiting manual dismissal.");
            return;
        }

        if (isBusy) {
            console.log("Script busy, retrying goToPreviousWeek...");
            setTimeout(goToPreviousWeek, 1500);
            return;
        }

        const timeSinceLastNav = Date.now() - lastNavigationTime;
        if (timeSinceLastNav < navigationDelay) {
            console.log(`Waiting ${navigationDelay - timeSinceLastNav}ms to avoid rapid navigation`);
            setTimeout(goToPreviousWeek, navigationDelay - timeSinceLastNav);
            return;
        }

        isBusy = true;
        console.log("Navigating to previous week...");
        let previousWeekButton;
        try {
            previousWeekButton = document.querySelector('#searchForWeeklySlotsPreviousWeek');
        } catch (err) {
            console.error("Error querying previous week button:", err);
            isBusy = false;
            randomDelay(goToPreviousWeek);
            return;
        }

        if (previousWeekButton && !foundSeat) {
            if (checkForPopup()) {
                isBusy = false;
                return;
            }

            lastNavigationTime = Date.now();
            showToast("Checking previous week...");
            clickWithDelay(previousWeekButton, () => {
                console.log("Clicked previous week button");
                Promise.all([
                    waitForElement('table.slots-table td.day:not(.not-this-month)', 12000),
                    waitForElement('#main-iframe', 12000).catch(() => null)
                ])
                    .then(() => {
                        console.log("Calendar updated, proceeding...");
                        setTimeout(step6, minWaitAfterLoad);
                    })
                    .catch((err) => {
                        console.error("Failed to load calendar:", err);
                        showToast("Error loading previous week. Retrying...");
                        setTimeout(goToPreviousWeek, minDelay);
                    })
                    .finally(() => {
                        isBusy = false;
                    });
            });
        } else {
            console.log("Previous week button missing or seat found, switching to forward...");
            searchDirection = "forward";
            currentWeekIndex = 0;
            backwardWeekIndex = 0;
            randomDelay(step7);
            isBusy = false;
        }
    }

    function startSearch() {
        if (!isScriptRunning) {
            console.log("Script stopped, skipping startSearch.");
            return;
        }

        console.log("Starting search...");
        currentWeekIndex = 0;
        backwardWeekIndex = 0;
        searchDirection = "forward";
        foundSeat = false;
        randomDelay(step6);
    }

    function checkForPopup() {
        let popup;
        try {
            popup = document.querySelector('.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front');
        } catch (err) {
            console.error("Error checking for popup:", err);
            return false;
        }

        if (popup) {
            const popupText = popup.textContent || popup.innerText;
            if (popupText.includes("Currently no tests are available")) {
                let closeButton;
                try {
                    closeButton = popup.querySelector('.ui-button.ui-corner-all.ui-widget');
                } catch (err) {
                    console.error("Error finding close button:", err);
                }
                if (closeButton) {
                    clickWithDelay(closeButton, () => {
                        console.log("Auto-closed 'no tests available' popup");
                        isPopupVisible = false;
                    });
                    return false;
                }
            }
            const isVisible = window.getComputedStyle(popup).display !== 'none' && window.getComputedStyle(popup).visibility !== 'hidden';
            if (isVisible) {
                console.log("Blocking popup detected. Pausing...");
                showToast("Blocking popup detected. Please dismiss manually.");
                isPopupVisible = true;
                return true;
            }
        }
        if (isPopupVisible) {
            console.log("Popup dismissed, resuming...");
            isPopupVisible = false;
            randomDelay(step6);
        }
        return false;
    }

    document.addEventListener('keydown', (event) => {
        if (event.ctrlKey && event.shiftKey && event.key === 'S') {
            stopScript();
            event.preventDefault();
        }
    });

    document.addEventListener('keydown', (event) => {
        if (event.ctrlKey && event.shiftKey && event.key === 'R') {
            restartScript();
            event.preventDefault();
        }
    });

    window.addEventListener('load', () => {
        console.log("Page loaded, starting script...");
        randomDelay(startSearch);
    });

    setInterval(checkForPopup, 4000);

    (function createToastContainer() {
        const style = document.createElement('style');
        style.innerHTML = `
            .toast {
                visibility: hidden;
                min-width: 250px;
                margin-left: -125px;
                background-color: #333;
                color: #fff;
                text-align: center;
                border-radius: 2px;
                padding: 16px;
                position: fixed;
                z-index: 10000;
                left: 50%;
                bottom: 30px;
                font-size: 17px;
            }
            .toast.show {
                visibility: visible;
                -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
                animation: fadein 0.5s, fadeout 0.5s 2.5s;
            }
            @-webkit-keyframes fadein { from {bottom: 0; opacity: 0;} to {bottom: 30px; opacity: 1;} }
            @keyframes fadein { from {bottom: 0; opacity: 0;} to {bottom: 30px; opacity: 1;} }
            @-webkit@keyframes fadeout { from {bottom: 30px; opacity: 1;} to {bottom: 0; opacity: 0;} }
            @keyframes fadeout { from {bottom: 30px; opacity: 1;} to {bottom: 0; opacity: 0;} }
        `;
        document.head.appendChild(style);
    })();
})();
